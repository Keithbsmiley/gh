#!/usr/bin/env python

import os
import os.path
import signal
import sys
from helpers import credentials
from json import dumps
from requests import post
from subprocess import check_output
from webbrowser import open_new_tab

URL = "https://api.github.com/repos/%s/pulls"
NETRC_MACHINE = "api.github.com"


def signal_handle(sig, frame):
    sys.exit(0)


def current_branch_name():
    branch = check_output("git symbolic-ref --short HEAD".split()).strip()
    return "%s:%s" % (repo_username(), branch)


def repo_username():
    return repo_with_username().split("/")[0]


def repo_with_username():
    url_parts = filter_empty_string(origin_url().split("/"))
    username_repo = "/".join(url_parts[-2:])
    if username_repo.endswith(".git"):
        return username_repo[:-4]

    return username_repo


def filter_empty_string(array):
    return [a for a in array if len(a) > 0]


def origin_url():
    return check_output("git config --get remote.origin.url".split()).strip()


def git_directory():
    return check_output("git rev-parse -q --git-dir".split()).strip()


def pr_message_file():
    return os.path.join(git_directory(), "PULLREQUEST_EDITMSG")


def last_commit_message():
    message = check_output("git log --format=%B -n 1".split()).strip()
    return commit_from_string(message)


def commit_from_string(string):
    values = map(str.strip, string.split("\n", 1))
    if len(values) < 2:
        values.append("")
    return values


def pr_message():
    file_path = pr_message_file()
    title, body = last_commit_message()
    with open(file_path, "w") as f:
        f.write(title + "\n\n" + body + "\n")
        f.write("\n# The first line will be the title of the PR")
        f.write("\n# Anything below the first line will be the body\n")

    command = 'vim -c "set ft=gitcommit" %s' % file_path
    code = os.system(command)
    if code != 0:
        sys.exit("Not submitting PR")

    f = open(file_path, "r")
    text = f.read()
    f.close()

    lines = text.split("\n")
    lines = filter(lambda x: not x.startswith("#"), lines)
    text = "\n".join(lines)
    if len(text.strip()) < 1:
        sys.exit("Not submitting with empty message")

    return commit_from_string(text)


def submit_pr():
    text, body = pr_message()
    username, password = credentials.credentials(NETRC_MACHINE)
    headers = {'Accept': 'application/vnd.github.v3+json'}
    local = current_branch_name()
    remote = "master"
    api_url = URL % repo_with_username()
    payload = {"title": text, "body": body, "base": remote, "head": local}
    r = post(api_url,
             auth=(username, password),
             headers=headers,
             data=dumps(payload),
             )
    print r
    json = r.json()
    if r.status_code == 201:
        open_new_tab(json["html_url"])
    else:
        error_message = json["errors"][0]["message"]
        print(error_message)


signal.signal(signal.SIGINT, signal_handle)
if __name__ == '__main__':
    submit_pr()
